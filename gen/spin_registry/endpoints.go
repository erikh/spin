// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-registry endpoints
//
// Command:
// $ goa gen code.hollensbe.org/erikh/spin/design

package spinregistry

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "spin-registry" service endpoints.
type Endpoints struct {
	VMCreate goa.Endpoint
	VMUpdate goa.Endpoint
	VMDelete goa.Endpoint
	VMGet    goa.Endpoint
	VMList   goa.Endpoint
}

// NewEndpoints wraps the methods of the "spin-registry" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		VMCreate: NewVMCreateEndpoint(s),
		VMUpdate: NewVMUpdateEndpoint(s),
		VMDelete: NewVMDeleteEndpoint(s),
		VMGet:    NewVMGetEndpoint(s),
		VMList:   NewVMListEndpoint(s),
	}
}

// Use applies the given middleware to all the "spin-registry" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.VMCreate = m(e.VMCreate)
	e.VMUpdate = m(e.VMUpdate)
	e.VMDelete = m(e.VMDelete)
	e.VMGet = m(e.VMGet)
	e.VMList = m(e.VMList)
}

// NewVMCreateEndpoint returns an endpoint function that calls the method
// "vm/create" of service "spin-registry".
func NewVMCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*VM)
		return s.VMCreate(ctx, p)
	}
}

// NewVMUpdateEndpoint returns an endpoint function that calls the method
// "vm/update" of service "spin-registry".
func NewVMUpdateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdateVM)
		return nil, s.VMUpdate(ctx, p)
	}
}

// NewVMDeleteEndpoint returns an endpoint function that calls the method
// "vm/delete" of service "spin-registry".
func NewVMDeleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*VMDeletePayload)
		return nil, s.VMDelete(ctx, p)
	}
}

// NewVMGetEndpoint returns an endpoint function that calls the method "vm/get"
// of service "spin-registry".
func NewVMGetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*VMGetPayload)
		return s.VMGet(ctx, p)
	}
}

// NewVMListEndpoint returns an endpoint function that calls the method
// "vm/list" of service "spin-registry".
func NewVMListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.VMList(ctx)
	}
}
