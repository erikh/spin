// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-apiserver HTTP server types
//
// Command:
// $ goa gen github.com/erikh/spin/design

package server

import (
	spinapiserver "github.com/erikh/spin/gen/spin_apiserver"
	"github.com/erikh/spin/pkg/vm"
	goa "goa.design/goa/v3/pkg"
)

// VMUpdateRequestBody is the type of the "spin-apiserver" service "vm_update"
// endpoint HTTP request body.
type VMUpdateRequestBody struct {
	// VM Manifest to Update
	VM *vm.Transient `form:"vm,omitempty" json:"vm,omitempty" xml:"vm,omitempty"`
}

// NewVMDeletePayload builds a spin-apiserver service vm_delete endpoint
// payload.
func NewVMDeletePayload(id uint64) *spinapiserver.VMDeletePayload {
	v := &spinapiserver.VMDeletePayload{}
	v.ID = id

	return v
}

// NewVMGetPayload builds a spin-apiserver service vm_get endpoint payload.
func NewVMGetPayload(id uint64) *spinapiserver.VMGetPayload {
	v := &spinapiserver.VMGetPayload{}
	v.ID = id

	return v
}

// NewVMUpdatePayload builds a spin-apiserver service vm_update endpoint
// payload.
func NewVMUpdatePayload(body *VMUpdateRequestBody, id uint64) *spinapiserver.VMUpdatePayload {
	v := &spinapiserver.VMUpdatePayload{
		VM: body.VM,
	}
	v.ID = id

	return v
}

// NewControlStartPayload builds a spin-apiserver service control_start
// endpoint payload.
func NewControlStartPayload(id uint64) *spinapiserver.ControlStartPayload {
	v := &spinapiserver.ControlStartPayload{}
	v.ID = id

	return v
}

// NewControlStopPayload builds a spin-apiserver service control_stop endpoint
// payload.
func NewControlStopPayload(id uint64) *spinapiserver.ControlStopPayload {
	v := &spinapiserver.ControlStopPayload{}
	v.ID = id

	return v
}

// NewControlShutdownPayload builds a spin-apiserver service control_shutdown
// endpoint payload.
func NewControlShutdownPayload(id uint64) *spinapiserver.ControlShutdownPayload {
	v := &spinapiserver.ControlShutdownPayload{}
	v.ID = id

	return v
}

// ValidateVMUpdateRequestBody runs the validations defined on
// vm_update_request_body
func ValidateVMUpdateRequestBody(body *VMUpdateRequestBody) (err error) {
	if body.VM == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("vm", "body"))
	}
	return
}
