// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-apiserver HTTP server types
//
// Command:
// $ goa gen code.hollensbe.org/erikh/spin/design

package server

import (
	spinapiserver "code.hollensbe.org/erikh/spin/gen/spin_apiserver"
	goa "goa.design/goa/v3/pkg"
)

// AddVolumeRequestBody is the type of the "spin-apiserver" service
// "add_volume" endpoint HTTP request body.
type AddVolumeRequestBody struct {
	// volume identifier
	Volume *string `form:"volume,omitempty" json:"volume,omitempty" xml:"volume,omitempty"`
	// path to backing storage
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
}

// CreateImageOnVolumeRequestBody is the type of the "spin-apiserver" service
// "create_image_on_volume" endpoint HTTP request body.
type CreateImageOnVolumeRequestBody struct {
	// image name
	ImageName *string `form:"image_name,omitempty" json:"image_name,omitempty" xml:"image_name,omitempty"`
	// image size in GB
	ImageSize *uint `form:"image_size,omitempty" json:"image_size,omitempty" xml:"image_size,omitempty"`
	// volume identifier
	Volume *string `form:"volume,omitempty" json:"volume,omitempty" xml:"volume,omitempty"`
}

// DeleteImageOnVolumeRequestBody is the type of the "spin-apiserver" service
// "delete_image_on_volume" endpoint HTTP request body.
type DeleteImageOnVolumeRequestBody struct {
	// image name
	ImageName *string `form:"image_name,omitempty" json:"image_name,omitempty" xml:"image_name,omitempty"`
	// volume identifier
	Volume *string `form:"volume,omitempty" json:"volume,omitempty" xml:"volume,omitempty"`
}

// ResizeImageOnVolumeRequestBody is the type of the "spin-apiserver" service
// "resize_image_on_volume" endpoint HTTP request body.
type ResizeImageOnVolumeRequestBody struct {
	// image name
	ImageName *string `form:"image_name,omitempty" json:"image_name,omitempty" xml:"image_name,omitempty"`
	// new image size; must be larger than original size
	ImageSize *uint `form:"image_size,omitempty" json:"image_size,omitempty" xml:"image_size,omitempty"`
	// volume identifier
	Volume *string `form:"volume,omitempty" json:"volume,omitempty" xml:"volume,omitempty"`
}

// MoveImageRequestBody is the type of the "spin-apiserver" service
// "move_image" endpoint HTTP request body.
type MoveImageRequestBody struct {
	// image name
	ImageName *string `form:"image_name,omitempty" json:"image_name,omitempty" xml:"image_name,omitempty"`
	// volume identifier
	Volume *string `form:"volume,omitempty" json:"volume,omitempty" xml:"volume,omitempty"`
	// volume identifier to move to
	TargetVolume *string `form:"target_volume,omitempty" json:"target_volume,omitempty" xml:"target_volume,omitempty"`
}

// NewAddVolumePayload builds a spin-apiserver service add_volume endpoint
// payload.
func NewAddVolumePayload(body *AddVolumeRequestBody) *spinapiserver.AddVolumePayload {
	v := &spinapiserver.AddVolumePayload{
		Volume: *body.Volume,
		Path:   *body.Path,
	}

	return v
}

// NewRemoveVolumePayload builds a spin-apiserver service remove_volume
// endpoint payload.
func NewRemoveVolumePayload(volume string) *spinapiserver.RemoveVolumePayload {
	v := &spinapiserver.RemoveVolumePayload{}
	v.Volume = volume

	return v
}

// NewInfoVolumePayload builds a spin-apiserver service info_volume endpoint
// payload.
func NewInfoVolumePayload(volume string) *spinapiserver.InfoVolumePayload {
	v := &spinapiserver.InfoVolumePayload{}
	v.Volume = volume

	return v
}

// NewCreateImageOnVolumePayload builds a spin-apiserver service
// create_image_on_volume endpoint payload.
func NewCreateImageOnVolumePayload(body *CreateImageOnVolumeRequestBody) *spinapiserver.CreateImageOnVolumePayload {
	v := &spinapiserver.CreateImageOnVolumePayload{
		ImageName: *body.ImageName,
		ImageSize: *body.ImageSize,
		Volume:    *body.Volume,
	}

	return v
}

// NewDeleteImageOnVolumePayload builds a spin-apiserver service
// delete_image_on_volume endpoint payload.
func NewDeleteImageOnVolumePayload(body *DeleteImageOnVolumeRequestBody) *spinapiserver.DeleteImageOnVolumePayload {
	v := &spinapiserver.DeleteImageOnVolumePayload{
		ImageName: *body.ImageName,
		Volume:    *body.Volume,
	}

	return v
}

// NewResizeImageOnVolumePayload builds a spin-apiserver service
// resize_image_on_volume endpoint payload.
func NewResizeImageOnVolumePayload(body *ResizeImageOnVolumeRequestBody) *spinapiserver.ResizeImageOnVolumePayload {
	v := &spinapiserver.ResizeImageOnVolumePayload{
		ImageName: *body.ImageName,
		ImageSize: *body.ImageSize,
		Volume:    *body.Volume,
	}

	return v
}

// NewInfoImageOnVolumePayload builds a spin-apiserver service
// info_image_on_volume endpoint payload.
func NewInfoImageOnVolumePayload(volume string, imageName string) *spinapiserver.InfoImageOnVolumePayload {
	v := &spinapiserver.InfoImageOnVolumePayload{}
	v.Volume = volume
	v.ImageName = imageName

	return v
}

// NewMoveImagePayload builds a spin-apiserver service move_image endpoint
// payload.
func NewMoveImagePayload(body *MoveImageRequestBody) *spinapiserver.MoveImagePayload {
	v := &spinapiserver.MoveImagePayload{
		ImageName:    *body.ImageName,
		Volume:       *body.Volume,
		TargetVolume: *body.TargetVolume,
	}

	return v
}

// ValidateAddVolumeRequestBody runs the validations defined on
// add_volume_request_body
func ValidateAddVolumeRequestBody(body *AddVolumeRequestBody) (err error) {
	if body.Volume == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("volume", "body"))
	}
	if body.Path == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("path", "body"))
	}
	return
}

// ValidateCreateImageOnVolumeRequestBody runs the validations defined on
// create_image_on_volume_request_body
func ValidateCreateImageOnVolumeRequestBody(body *CreateImageOnVolumeRequestBody) (err error) {
	if body.ImageName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image_name", "body"))
	}
	if body.ImageSize == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image_size", "body"))
	}
	if body.Volume == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("volume", "body"))
	}
	return
}

// ValidateDeleteImageOnVolumeRequestBody runs the validations defined on
// delete_image_on_volume_request_body
func ValidateDeleteImageOnVolumeRequestBody(body *DeleteImageOnVolumeRequestBody) (err error) {
	if body.ImageName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image_name", "body"))
	}
	if body.Volume == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("volume", "body"))
	}
	return
}

// ValidateResizeImageOnVolumeRequestBody runs the validations defined on
// resize_image_on_volume_request_body
func ValidateResizeImageOnVolumeRequestBody(body *ResizeImageOnVolumeRequestBody) (err error) {
	if body.ImageName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image_name", "body"))
	}
	if body.ImageSize == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image_size", "body"))
	}
	if body.Volume == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("volume", "body"))
	}
	return
}

// ValidateMoveImageRequestBody runs the validations defined on
// move_image_request_body
func ValidateMoveImageRequestBody(body *MoveImageRequestBody) (err error) {
	if body.ImageName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image_name", "body"))
	}
	if body.Volume == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("volume", "body"))
	}
	if body.TargetVolume == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("target_volume", "body"))
	}
	return
}
