// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-apiserver HTTP server types
//
// Command:
// $ goa gen code.hollensbe.org/erikh/spin/design

package server

import (
	spinapiserver "code.hollensbe.org/erikh/spin/gen/spin_apiserver"
	goa "goa.design/goa/v3/pkg"
)

// VMCreateRequestBody is the type of the "spin-apiserver" service "vm/create"
// endpoint HTTP request body.
type VMCreateRequestBody struct {
	// Name of VM; does not need to be unique
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// CPU count
	Cpus *uint `form:"cpus,omitempty" json:"cpus,omitempty" xml:"cpus,omitempty"`
	// Memory (in megabytes)
	Memory *uint `form:"memory,omitempty" json:"memory,omitempty" xml:"memory,omitempty"`
	// Storage references
	Storage []*StorageRequestBody `form:"storage,omitempty" json:"storage,omitempty" xml:"storage,omitempty"`
}

// StorageRequestBody is used to define fields on request body types.
type StorageRequestBody struct {
	// Volume name, must not include `/`
	Volume *string `form:"volume,omitempty" json:"volume,omitempty" xml:"volume,omitempty"`
	// Image filename, must not include `/`
	Image *string `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// Image size (in gigabytes)
	ImageSize *uint64 `form:"image_size,omitempty" json:"image_size,omitempty" xml:"image_size,omitempty"`
	// Is this image a cdrom?
	Cdrom *bool `form:"cdrom,omitempty" json:"cdrom,omitempty" xml:"cdrom,omitempty"`
}

// NewVMCreateVM builds a spin-apiserver service vm/create endpoint payload.
func NewVMCreateVM(body *VMCreateRequestBody) *spinapiserver.VM {
	v := &spinapiserver.VM{
		Name:   *body.Name,
		Cpus:   *body.Cpus,
		Memory: *body.Memory,
	}
	v.Storage = make([]*spinapiserver.Storage, len(body.Storage))
	for i, val := range body.Storage {
		v.Storage[i] = unmarshalStorageRequestBodyToSpinapiserverStorage(val)
	}

	return v
}

// NewVMDeletePayload builds a spin-apiserver service vm/delete endpoint
// payload.
func NewVMDeletePayload(id uint64) *spinapiserver.VMDeletePayload {
	v := &spinapiserver.VMDeletePayload{}
	v.ID = id

	return v
}

// NewControlStartPayload builds a spin-apiserver service control/start
// endpoint payload.
func NewControlStartPayload(id uint64) *spinapiserver.ControlStartPayload {
	v := &spinapiserver.ControlStartPayload{}
	v.ID = id

	return v
}

// NewControlStopPayload builds a spin-apiserver service control/stop endpoint
// payload.
func NewControlStopPayload(id uint64) *spinapiserver.ControlStopPayload {
	v := &spinapiserver.ControlStopPayload{}
	v.ID = id

	return v
}

// NewControlShutdownPayload builds a spin-apiserver service control/shutdown
// endpoint payload.
func NewControlShutdownPayload(id uint64) *spinapiserver.ControlShutdownPayload {
	v := &spinapiserver.ControlShutdownPayload{}
	v.ID = id

	return v
}

// ValidateVMCreateRequestBody runs the validations defined on
// Vm/CreateRequestBody
func ValidateVMCreateRequestBody(body *VMCreateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Cpus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cpus", "body"))
	}
	if body.Memory == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("memory", "body"))
	}
	if body.Storage == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("storage", "body"))
	}
	for _, e := range body.Storage {
		if e != nil {
			if err2 := ValidateStorageRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateStorageRequestBody runs the validations defined on StorageRequestBody
func ValidateStorageRequestBody(body *StorageRequestBody) (err error) {
	if body.Volume == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("volume", "body"))
	}
	if body.Image == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image", "body"))
	}
	return
}
