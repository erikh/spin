// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-apiserver HTTP server encoders and decoders
//
// Command:
// $ goa gen code.hollensbe.org/erikh/spin/design

package server

import (
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAddVolumeResponse returns an encoder for responses returned by the
// spin-apiserver add_volume endpoint.
func EncodeAddVolumeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeAddVolumeRequest returns a decoder for requests sent to the
// spin-apiserver add_volume endpoint.
func DecodeAddVolumeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body AddVolumeRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAddVolumeRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewAddVolumePayload(&body)

		return payload, nil
	}
}

// EncodeRemoveVolumeResponse returns an encoder for responses returned by the
// spin-apiserver remove_volume endpoint.
func EncodeRemoveVolumeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeRemoveVolumeRequest returns a decoder for requests sent to the
// spin-apiserver remove_volume endpoint.
func DecodeRemoveVolumeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			volume string

			params = mux.Vars(r)
		)
		volume = params["volume"]
		payload := NewRemoveVolumePayload(volume)

		return payload, nil
	}
}

// EncodeInfoVolumeResponse returns an encoder for responses returned by the
// spin-apiserver info_volume endpoint.
func EncodeInfoVolumeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeInfoVolumeRequest returns a decoder for requests sent to the
// spin-apiserver info_volume endpoint.
func DecodeInfoVolumeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			volume string

			params = mux.Vars(r)
		)
		volume = params["volume"]
		payload := NewInfoVolumePayload(volume)

		return payload, nil
	}
}

// EncodeCreateImageOnVolumeResponse returns an encoder for responses returned
// by the spin-apiserver create_image_on_volume endpoint.
func EncodeCreateImageOnVolumeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeCreateImageOnVolumeRequest returns a decoder for requests sent to the
// spin-apiserver create_image_on_volume endpoint.
func DecodeCreateImageOnVolumeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateImageOnVolumeRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateImageOnVolumeRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateImageOnVolumePayload(&body)

		return payload, nil
	}
}

// EncodeDeleteImageOnVolumeResponse returns an encoder for responses returned
// by the spin-apiserver delete_image_on_volume endpoint.
func EncodeDeleteImageOnVolumeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteImageOnVolumeRequest returns a decoder for requests sent to the
// spin-apiserver delete_image_on_volume endpoint.
func DecodeDeleteImageOnVolumeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body DeleteImageOnVolumeRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateDeleteImageOnVolumeRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewDeleteImageOnVolumePayload(&body)

		return payload, nil
	}
}

// EncodeResizeImageOnVolumeResponse returns an encoder for responses returned
// by the spin-apiserver resize_image_on_volume endpoint.
func EncodeResizeImageOnVolumeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeResizeImageOnVolumeRequest returns a decoder for requests sent to the
// spin-apiserver resize_image_on_volume endpoint.
func DecodeResizeImageOnVolumeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ResizeImageOnVolumeRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateResizeImageOnVolumeRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewResizeImageOnVolumePayload(&body)

		return payload, nil
	}
}

// EncodeInfoImageOnVolumeResponse returns an encoder for responses returned by
// the spin-apiserver info_image_on_volume endpoint.
func EncodeInfoImageOnVolumeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeInfoImageOnVolumeRequest returns a decoder for requests sent to the
// spin-apiserver info_image_on_volume endpoint.
func DecodeInfoImageOnVolumeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			volume    string
			imageName string

			params = mux.Vars(r)
		)
		volume = params["volume"]
		imageName = params["image_name"]
		payload := NewInfoImageOnVolumePayload(volume, imageName)

		return payload, nil
	}
}

// EncodeMoveImageResponse returns an encoder for responses returned by the
// spin-apiserver move_image endpoint.
func EncodeMoveImageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeMoveImageRequest returns a decoder for requests sent to the
// spin-apiserver move_image endpoint.
func DecodeMoveImageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body MoveImageRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateMoveImageRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewMoveImagePayload(&body)

		return payload, nil
	}
}
