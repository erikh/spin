// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-apiserver client HTTP transport
//
// Command:
// $ goa gen code.hollensbe.org/erikh/spin/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the spin-apiserver service endpoint HTTP clients.
type Client struct {
	// AddVolume Doer is the HTTP client used to make requests to the add_volume
	// endpoint.
	AddVolumeDoer goahttp.Doer

	// RemoveVolume Doer is the HTTP client used to make requests to the
	// remove_volume endpoint.
	RemoveVolumeDoer goahttp.Doer

	// LabelVolume Doer is the HTTP client used to make requests to the
	// label_volume endpoint.
	LabelVolumeDoer goahttp.Doer

	// InfoVolume Doer is the HTTP client used to make requests to the info_volume
	// endpoint.
	InfoVolumeDoer goahttp.Doer

	// CreateImageOnVolume Doer is the HTTP client used to make requests to the
	// create_image_on_volume endpoint.
	CreateImageOnVolumeDoer goahttp.Doer

	// DeleteImageOnVolume Doer is the HTTP client used to make requests to the
	// delete_image_on_volume endpoint.
	DeleteImageOnVolumeDoer goahttp.Doer

	// ResizeImageOnVolume Doer is the HTTP client used to make requests to the
	// resize_image_on_volume endpoint.
	ResizeImageOnVolumeDoer goahttp.Doer

	// InfoImageOnVolume Doer is the HTTP client used to make requests to the
	// info_image_on_volume endpoint.
	InfoImageOnVolumeDoer goahttp.Doer

	// MoveImage Doer is the HTTP client used to make requests to the move_image
	// endpoint.
	MoveImageDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the spin-apiserver service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AddVolumeDoer:           doer,
		RemoveVolumeDoer:        doer,
		LabelVolumeDoer:         doer,
		InfoVolumeDoer:          doer,
		CreateImageOnVolumeDoer: doer,
		DeleteImageOnVolumeDoer: doer,
		ResizeImageOnVolumeDoer: doer,
		InfoImageOnVolumeDoer:   doer,
		MoveImageDoer:           doer,
		RestoreResponseBody:     restoreBody,
		scheme:                  scheme,
		host:                    host,
		decoder:                 dec,
		encoder:                 enc,
	}
}

// AddVolume returns an endpoint that makes HTTP requests to the spin-apiserver
// service add_volume server.
func (c *Client) AddVolume() goa.Endpoint {
	var (
		encodeRequest  = EncodeAddVolumeRequest(c.encoder)
		decodeResponse = DecodeAddVolumeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAddVolumeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddVolumeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-apiserver", "add_volume", err)
		}
		return decodeResponse(resp)
	}
}

// RemoveVolume returns an endpoint that makes HTTP requests to the
// spin-apiserver service remove_volume server.
func (c *Client) RemoveVolume() goa.Endpoint {
	var (
		decodeResponse = DecodeRemoveVolumeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRemoveVolumeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RemoveVolumeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-apiserver", "remove_volume", err)
		}
		return decodeResponse(resp)
	}
}

// LabelVolume returns an endpoint that makes HTTP requests to the
// spin-apiserver service label_volume server.
func (c *Client) LabelVolume() goa.Endpoint {
	var (
		decodeResponse = DecodeLabelVolumeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildLabelVolumeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LabelVolumeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-apiserver", "label_volume", err)
		}
		return decodeResponse(resp)
	}
}

// InfoVolume returns an endpoint that makes HTTP requests to the
// spin-apiserver service info_volume server.
func (c *Client) InfoVolume() goa.Endpoint {
	var (
		decodeResponse = DecodeInfoVolumeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildInfoVolumeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.InfoVolumeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-apiserver", "info_volume", err)
		}
		return decodeResponse(resp)
	}
}

// CreateImageOnVolume returns an endpoint that makes HTTP requests to the
// spin-apiserver service create_image_on_volume server.
func (c *Client) CreateImageOnVolume() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateImageOnVolumeRequest(c.encoder)
		decodeResponse = DecodeCreateImageOnVolumeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateImageOnVolumeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateImageOnVolumeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-apiserver", "create_image_on_volume", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteImageOnVolume returns an endpoint that makes HTTP requests to the
// spin-apiserver service delete_image_on_volume server.
func (c *Client) DeleteImageOnVolume() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteImageOnVolumeRequest(c.encoder)
		decodeResponse = DecodeDeleteImageOnVolumeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteImageOnVolumeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteImageOnVolumeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-apiserver", "delete_image_on_volume", err)
		}
		return decodeResponse(resp)
	}
}

// ResizeImageOnVolume returns an endpoint that makes HTTP requests to the
// spin-apiserver service resize_image_on_volume server.
func (c *Client) ResizeImageOnVolume() goa.Endpoint {
	var (
		encodeRequest  = EncodeResizeImageOnVolumeRequest(c.encoder)
		decodeResponse = DecodeResizeImageOnVolumeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildResizeImageOnVolumeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ResizeImageOnVolumeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-apiserver", "resize_image_on_volume", err)
		}
		return decodeResponse(resp)
	}
}

// InfoImageOnVolume returns an endpoint that makes HTTP requests to the
// spin-apiserver service info_image_on_volume server.
func (c *Client) InfoImageOnVolume() goa.Endpoint {
	var (
		decodeResponse = DecodeInfoImageOnVolumeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildInfoImageOnVolumeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.InfoImageOnVolumeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-apiserver", "info_image_on_volume", err)
		}
		return decodeResponse(resp)
	}
}

// MoveImage returns an endpoint that makes HTTP requests to the spin-apiserver
// service move_image server.
func (c *Client) MoveImage() goa.Endpoint {
	var (
		encodeRequest  = EncodeMoveImageRequest(c.encoder)
		decodeResponse = DecodeMoveImageResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildMoveImageRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MoveImageDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-apiserver", "move_image", err)
		}
		return decodeResponse(resp)
	}
}
