// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-apiserver HTTP client types
//
// Command:
// $ goa gen code.hollensbe.org/erikh/spin/design

package client

import (
	spinapiserver "code.hollensbe.org/erikh/spin/gen/spin_apiserver"
)

// VMCreateRequestBody is the type of the "spin-apiserver" service "vm_create"
// endpoint HTTP request body.
type VMCreateRequestBody struct {
	// Storage references
	Storage []*StorageRequestBody `form:"storage" json:"storage" xml:"storage"`
	// Name of VM; does not need to be unique
	Name string `form:"name" json:"name" xml:"name"`
	// CPU count
	Cpus uint `form:"cpus" json:"cpus" xml:"cpus"`
	// Memory (in megabytes)
	Memory uint `form:"memory" json:"memory" xml:"memory"`
}

// StorageRequestBody is used to define fields on request body types.
type StorageRequestBody struct {
	// Volume name
	Volume string `form:"volume" json:"volume" xml:"volume"`
	// Image filename, no `/` characters
	Image string `form:"image" json:"image" xml:"image"`
	// Image size (in gigabytes)
	ImageSize *uint64 `form:"image_size,omitempty" json:"image_size,omitempty" xml:"image_size,omitempty"`
	// Is this image a cdrom?
	Cdrom *bool `form:"cdrom,omitempty" json:"cdrom,omitempty" xml:"cdrom,omitempty"`
}

// NewVMCreateRequestBody builds the HTTP request body from the payload of the
// "vm_create" endpoint of the "spin-apiserver" service.
func NewVMCreateRequestBody(p *spinapiserver.CreateVM) *VMCreateRequestBody {
	body := &VMCreateRequestBody{
		Name:   p.Name,
		Cpus:   p.Cpus,
		Memory: p.Memory,
	}
	if p.Storage != nil {
		body.Storage = make([]*StorageRequestBody, len(p.Storage))
		for i, val := range p.Storage {
			body.Storage[i] = marshalSpinapiserverStorageToStorageRequestBody(val)
		}
	}
	return body
}
