// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-apiserver HTTP client types
//
// Command:
// $ goa gen code.hollensbe.org/erikh/spin/design

package client

import (
	spinapiserver "code.hollensbe.org/erikh/spin/gen/spin_apiserver"
)

// AddVolumeRequestBody is the type of the "spin-apiserver" service
// "add_volume" endpoint HTTP request body.
type AddVolumeRequestBody struct {
	// volume identifier
	Volume string `form:"volume" json:"volume" xml:"volume"`
	// path to backing storage
	Path string `form:"path" json:"path" xml:"path"`
}

// CreateImageOnVolumeRequestBody is the type of the "spin-apiserver" service
// "create_image_on_volume" endpoint HTTP request body.
type CreateImageOnVolumeRequestBody struct {
	// image name
	ImageName string `form:"image_name" json:"image_name" xml:"image_name"`
	// image size in GB
	ImageSize uint `form:"image_size" json:"image_size" xml:"image_size"`
	// volume identifier
	Volume string `form:"volume" json:"volume" xml:"volume"`
}

// DeleteImageOnVolumeRequestBody is the type of the "spin-apiserver" service
// "delete_image_on_volume" endpoint HTTP request body.
type DeleteImageOnVolumeRequestBody struct {
	// image name
	ImageName string `form:"image_name" json:"image_name" xml:"image_name"`
	// volume identifier
	Volume string `form:"volume" json:"volume" xml:"volume"`
}

// ResizeImageOnVolumeRequestBody is the type of the "spin-apiserver" service
// "resize_image_on_volume" endpoint HTTP request body.
type ResizeImageOnVolumeRequestBody struct {
	// image name
	ImageName string `form:"image_name" json:"image_name" xml:"image_name"`
	// new image size; must be larger than original size
	ImageSize uint `form:"image_size" json:"image_size" xml:"image_size"`
	// volume identifier
	Volume string `form:"volume" json:"volume" xml:"volume"`
}

// MoveImageRequestBody is the type of the "spin-apiserver" service
// "move_image" endpoint HTTP request body.
type MoveImageRequestBody struct {
	// image name
	ImageName string `form:"image_name" json:"image_name" xml:"image_name"`
	// volume identifier
	Volume string `form:"volume" json:"volume" xml:"volume"`
	// volume identifier to move to
	TargetVolume string `form:"target_volume" json:"target_volume" xml:"target_volume"`
}

// NewAddVolumeRequestBody builds the HTTP request body from the payload of the
// "add_volume" endpoint of the "spin-apiserver" service.
func NewAddVolumeRequestBody(p *spinapiserver.AddVolumePayload) *AddVolumeRequestBody {
	body := &AddVolumeRequestBody{
		Volume: p.Volume,
		Path:   p.Path,
	}
	return body
}

// NewCreateImageOnVolumeRequestBody builds the HTTP request body from the
// payload of the "create_image_on_volume" endpoint of the "spin-apiserver"
// service.
func NewCreateImageOnVolumeRequestBody(p *spinapiserver.CreateImageOnVolumePayload) *CreateImageOnVolumeRequestBody {
	body := &CreateImageOnVolumeRequestBody{
		ImageName: p.ImageName,
		ImageSize: p.ImageSize,
		Volume:    p.Volume,
	}
	return body
}

// NewDeleteImageOnVolumeRequestBody builds the HTTP request body from the
// payload of the "delete_image_on_volume" endpoint of the "spin-apiserver"
// service.
func NewDeleteImageOnVolumeRequestBody(p *spinapiserver.DeleteImageOnVolumePayload) *DeleteImageOnVolumeRequestBody {
	body := &DeleteImageOnVolumeRequestBody{
		ImageName: p.ImageName,
		Volume:    p.Volume,
	}
	return body
}

// NewResizeImageOnVolumeRequestBody builds the HTTP request body from the
// payload of the "resize_image_on_volume" endpoint of the "spin-apiserver"
// service.
func NewResizeImageOnVolumeRequestBody(p *spinapiserver.ResizeImageOnVolumePayload) *ResizeImageOnVolumeRequestBody {
	body := &ResizeImageOnVolumeRequestBody{
		ImageName: p.ImageName,
		ImageSize: p.ImageSize,
		Volume:    p.Volume,
	}
	return body
}

// NewMoveImageRequestBody builds the HTTP request body from the payload of the
// "move_image" endpoint of the "spin-apiserver" service.
func NewMoveImageRequestBody(p *spinapiserver.MoveImagePayload) *MoveImageRequestBody {
	body := &MoveImageRequestBody{
		ImageName:    p.ImageName,
		Volume:       p.Volume,
		TargetVolume: p.TargetVolume,
	}
	return body
}
