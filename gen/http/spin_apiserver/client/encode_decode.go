// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-apiserver HTTP client encoders and decoders
//
// Command:
// $ goa gen code.hollensbe.org/erikh/spin/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	spinapiserver "code.hollensbe.org/erikh/spin/gen/spin_apiserver"
	goahttp "goa.design/goa/v3/http"
)

// BuildVMCreateRequest instantiates a HTTP request object with method and path
// set to call the "spin-apiserver" service "vm_create" endpoint
func (c *Client) BuildVMCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VMCreateSpinApiserverPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-apiserver", "vm_create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeVMCreateRequest returns an encoder for requests sent to the
// spin-apiserver vm_create server.
func EncodeVMCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*spinapiserver.CreateVM)
		if !ok {
			return goahttp.ErrInvalidType("spin-apiserver", "vm_create", "*spinapiserver.CreateVM", v)
		}
		body := NewVMCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("spin-apiserver", "vm_create", err)
		}
		return nil
	}
}

// DecodeVMCreateResponse returns a decoder for responses returned by the
// spin-apiserver vm_create endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeVMCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body uint64
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("spin-apiserver", "vm_create", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-apiserver", "vm_create", resp.StatusCode, string(body))
		}
	}
}

// BuildVMDeleteRequest instantiates a HTTP request object with method and path
// set to call the "spin-apiserver" service "vm_delete" endpoint
func (c *Client) BuildVMDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*spinapiserver.VMDeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("spin-apiserver", "vm_delete", "*spinapiserver.VMDeletePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VMDeleteSpinApiserverPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-apiserver", "vm_delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeVMDeleteResponse returns a decoder for responses returned by the
// spin-apiserver vm_delete endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeVMDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-apiserver", "vm_delete", resp.StatusCode, string(body))
		}
	}
}

// BuildVMListRequest instantiates a HTTP request object with method and path
// set to call the "spin-apiserver" service "vm_list" endpoint
func (c *Client) BuildVMListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VMListSpinApiserverPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-apiserver", "vm_list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeVMListResponse returns a decoder for responses returned by the
// spin-apiserver vm_list endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeVMListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []uint64
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("spin-apiserver", "vm_list", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-apiserver", "vm_list", resp.StatusCode, string(body))
		}
	}
}

// BuildVMGetRequest instantiates a HTTP request object with method and path
// set to call the "spin-apiserver" service "vm_get" endpoint
func (c *Client) BuildVMGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*spinapiserver.VMGetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("spin-apiserver", "vm_get", "*spinapiserver.VMGetPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VMGetSpinApiserverPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-apiserver", "vm_get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeVMGetResponse returns a decoder for responses returned by the
// spin-apiserver vm_get endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeVMGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body VMGetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("spin-apiserver", "vm_get", err)
			}
			err = ValidateVMGetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("spin-apiserver", "vm_get", err)
			}
			res := NewVMGetUpdatedVMOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-apiserver", "vm_get", resp.StatusCode, string(body))
		}
	}
}

// BuildVMUpdateRequest instantiates a HTTP request object with method and path
// set to call the "spin-apiserver" service "vm_update" endpoint
func (c *Client) BuildVMUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*spinapiserver.VMUpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("spin-apiserver", "vm_update", "*spinapiserver.VMUpdatePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VMUpdateSpinApiserverPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-apiserver", "vm_update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeVMUpdateRequest returns an encoder for requests sent to the
// spin-apiserver vm_update server.
func EncodeVMUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*spinapiserver.VMUpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("spin-apiserver", "vm_update", "*spinapiserver.VMUpdatePayload", v)
		}
		body := NewVMUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("spin-apiserver", "vm_update", err)
		}
		return nil
	}
}

// DecodeVMUpdateResponse returns a decoder for responses returned by the
// spin-apiserver vm_update endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeVMUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-apiserver", "vm_update", resp.StatusCode, string(body))
		}
	}
}

// BuildControlStartRequest instantiates a HTTP request object with method and
// path set to call the "spin-apiserver" service "control_start" endpoint
func (c *Client) BuildControlStartRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*spinapiserver.ControlStartPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("spin-apiserver", "control_start", "*spinapiserver.ControlStartPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ControlStartSpinApiserverPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-apiserver", "control_start", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeControlStartResponse returns a decoder for responses returned by the
// spin-apiserver control_start endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeControlStartResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-apiserver", "control_start", resp.StatusCode, string(body))
		}
	}
}

// BuildControlStopRequest instantiates a HTTP request object with method and
// path set to call the "spin-apiserver" service "control_stop" endpoint
func (c *Client) BuildControlStopRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*spinapiserver.ControlStopPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("spin-apiserver", "control_stop", "*spinapiserver.ControlStopPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ControlStopSpinApiserverPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-apiserver", "control_stop", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeControlStopResponse returns a decoder for responses returned by the
// spin-apiserver control_stop endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeControlStopResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-apiserver", "control_stop", resp.StatusCode, string(body))
		}
	}
}

// BuildControlShutdownRequest instantiates a HTTP request object with method
// and path set to call the "spin-apiserver" service "control_shutdown" endpoint
func (c *Client) BuildControlShutdownRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*spinapiserver.ControlShutdownPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("spin-apiserver", "control_shutdown", "*spinapiserver.ControlShutdownPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ControlShutdownSpinApiserverPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-apiserver", "control_shutdown", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeControlShutdownResponse returns a decoder for responses returned by
// the spin-apiserver control_shutdown endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeControlShutdownResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-apiserver", "control_shutdown", resp.StatusCode, string(body))
		}
	}
}

// marshalSpinapiserverStorageToStorageRequestBody builds a value of type
// *StorageRequestBody from a value of type *spinapiserver.Storage.
func marshalSpinapiserverStorageToStorageRequestBody(v *spinapiserver.Storage) *StorageRequestBody {
	res := &StorageRequestBody{
		Volume:    v.Volume,
		Image:     v.Image,
		ImageSize: v.ImageSize,
		Cdrom:     v.Cdrom,
	}

	return res
}

// marshalStorageRequestBodyToSpinapiserverStorage builds a value of type
// *spinapiserver.Storage from a value of type *StorageRequestBody.
func marshalStorageRequestBodyToSpinapiserverStorage(v *StorageRequestBody) *spinapiserver.Storage {
	res := &spinapiserver.Storage{
		Volume:    v.Volume,
		Image:     v.Image,
		ImageSize: v.ImageSize,
		Cdrom:     v.Cdrom,
	}

	return res
}

// unmarshalImageResponseBodyToSpinapiserverImage builds a value of type
// *spinapiserver.Image from a value of type *ImageResponseBody.
func unmarshalImageResponseBodyToSpinapiserverImage(v *ImageResponseBody) *spinapiserver.Image {
	res := &spinapiserver.Image{
		Path:   *v.Path,
		Cdrom:  *v.Cdrom,
		Volume: v.Volume,
	}

	return res
}

// marshalSpinapiserverUpdatedVMToUpdatedVMRequestBody builds a value of type
// *UpdatedVMRequestBody from a value of type *spinapiserver.UpdatedVM.
func marshalSpinapiserverUpdatedVMToUpdatedVMRequestBody(v *spinapiserver.UpdatedVM) *UpdatedVMRequestBody {
	res := &UpdatedVMRequestBody{
		Name:   v.Name,
		Cpus:   v.Cpus,
		Memory: v.Memory,
	}
	if v.Images != nil {
		res.Images = make([]*ImageRequestBody, len(v.Images))
		for i, val := range v.Images {
			res.Images[i] = marshalSpinapiserverImageToImageRequestBody(val)
		}
	}

	return res
}

// marshalSpinapiserverImageToImageRequestBody builds a value of type
// *ImageRequestBody from a value of type *spinapiserver.Image.
func marshalSpinapiserverImageToImageRequestBody(v *spinapiserver.Image) *ImageRequestBody {
	res := &ImageRequestBody{
		Path:   v.Path,
		Cdrom:  v.Cdrom,
		Volume: v.Volume,
	}

	return res
}

// marshalUpdatedVMRequestBodyToSpinapiserverUpdatedVM builds a value of type
// *spinapiserver.UpdatedVM from a value of type *UpdatedVMRequestBody.
func marshalUpdatedVMRequestBodyToSpinapiserverUpdatedVM(v *UpdatedVMRequestBody) *spinapiserver.UpdatedVM {
	res := &spinapiserver.UpdatedVM{
		Name:   v.Name,
		Cpus:   v.Cpus,
		Memory: v.Memory,
	}
	if v.Images != nil {
		res.Images = make([]*spinapiserver.Image, len(v.Images))
		for i, val := range v.Images {
			res.Images[i] = marshalImageRequestBodyToSpinapiserverImage(val)
		}
	}

	return res
}

// marshalImageRequestBodyToSpinapiserverImage builds a value of type
// *spinapiserver.Image from a value of type *ImageRequestBody.
func marshalImageRequestBodyToSpinapiserverImage(v *ImageRequestBody) *spinapiserver.Image {
	res := &spinapiserver.Image{
		Path:   v.Path,
		Cdrom:  v.Cdrom,
		Volume: v.Volume,
	}

	return res
}
