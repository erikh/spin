// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-broker HTTP client types
//
// Command:
// $ goa gen code.hollensbe.org/erikh/spin/design

package client

import (
	spinbroker "code.hollensbe.org/erikh/spin/gen/spin_broker"
	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "spin-broker" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	// Resource name
	Resource string `form:"resource" json:"resource" xml:"resource"`
	// Action name
	Action string `form:"action" json:"action" xml:"action"`
	// Action parameters
	Parameters map[string]string `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
}

// CompleteRequestBody is the type of the "spin-broker" service "complete"
// endpoint HTTP request body.
type CompleteRequestBody struct {
	// Command ID
	ID string `form:"id" json:"id" xml:"id"`
	// status of work
	Status bool `form:"status" json:"status" xml:"status"`
	// reason of success/failure
	StatusReason *string `form:"status_reason,omitempty" json:"status_reason,omitempty" xml:"status_reason,omitempty"`
}

// StatusResponseBody is the type of the "spin-broker" service "status"
// endpoint HTTP response body.
type StatusResponseBody struct {
	// Pass/Fail status
	Status *bool `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Failure reason (if any)
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
}

// NextResponseBody is the type of the "spin-broker" service "next" endpoint
// HTTP response body.
type NextResponseBody struct {
	// Command ID
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
	// resource type
	Resource *string `form:"resource,omitempty" json:"resource,omitempty" xml:"resource,omitempty"`
	// action name
	Action *string `form:"action,omitempty" json:"action,omitempty" xml:"action,omitempty"`
	// parameters for action
	Parameters map[string]string `form:"parameters,omitempty" json:"parameters,omitempty" xml:"parameters,omitempty"`
}

// NewAddRequestBody builds the HTTP request body from the payload of the "add"
// endpoint of the "spin-broker" service.
func NewAddRequestBody(p *spinbroker.AddPayload) *AddRequestBody {
	body := &AddRequestBody{
		Resource: p.Resource,
		Action:   p.Action,
	}
	if p.Parameters != nil {
		body.Parameters = make(map[string]string, len(p.Parameters))
		for key, val := range p.Parameters {
			tk := key
			tv := val
			body.Parameters[tk] = tv
		}
	}
	return body
}

// NewCompleteRequestBody builds the HTTP request body from the payload of the
// "complete" endpoint of the "spin-broker" service.
func NewCompleteRequestBody(p *spinbroker.CompletePayload) *CompleteRequestBody {
	body := &CompleteRequestBody{
		ID:           p.ID,
		Status:       p.Status,
		StatusReason: p.StatusReason,
	}
	return body
}

// NewStatusResultOK builds a "spin-broker" service "status" endpoint result
// from a HTTP "OK" response.
func NewStatusResultOK(body *StatusResponseBody) *spinbroker.StatusResult {
	v := &spinbroker.StatusResult{
		Status: *body.Status,
		Reason: body.Reason,
	}

	return v
}

// NewNextResultOK builds a "spin-broker" service "next" endpoint result from a
// HTTP "OK" response.
func NewNextResultOK(body *NextResponseBody) *spinbroker.NextResult {
	v := &spinbroker.NextResult{
		UUID:     *body.UUID,
		Resource: *body.Resource,
		Action:   *body.Action,
	}
	if body.Parameters != nil {
		v.Parameters = make(map[string]string, len(body.Parameters))
		for key, val := range body.Parameters {
			tk := key
			tv := val
			v.Parameters[tk] = tv
		}
	}

	return v
}

// ValidateStatusResponseBody runs the validations defined on StatusResponseBody
func ValidateStatusResponseBody(body *StatusResponseBody) (err error) {
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	return
}

// ValidateNextResponseBody runs the validations defined on NextResponseBody
func ValidateNextResponseBody(body *NextResponseBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.Resource == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("resource", "body"))
	}
	if body.Action == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("action", "body"))
	}
	return
}
