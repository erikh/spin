// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-registry HTTP server
//
// Command:
// $ goa gen github.com/erikh/spin/design

package server

import (
	"context"
	"net/http"

	spinregistry "github.com/erikh/spin/gen/spin_registry"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the spin-registry service endpoint HTTP handlers.
type Server struct {
	Mounts               []*MountPoint
	VMCreate             http.Handler
	VMUpdate             http.Handler
	VMDelete             http.Handler
	VMGet                http.Handler
	VMList               http.Handler
	StorageVolumesList   http.Handler
	StorageVolumesCreate http.Handler
	StorageVolumesDelete http.Handler
	StorageImagesList    http.Handler
	StorageImagesCreate  http.Handler
	StorageImagesDelete  http.Handler
	StorageImagesGet     http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the spin-registry service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *spinregistry.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"VMCreate", "POST", "/vm/create"},
			{"VMUpdate", "POST", "/vm/update/{id}"},
			{"VMDelete", "POST", "/vm/delete/{id}"},
			{"VMGet", "GET", "/vm/get/{id}"},
			{"VMList", "GET", "/vm/list"},
			{"StorageVolumesList", "GET", "/storage/volumes/list"},
			{"StorageVolumesCreate", "POST", "/storage/volumes/create"},
			{"StorageVolumesDelete", "POST", "/storage/volumes/delete"},
			{"StorageImagesList", "GET", "/storage/images/list"},
			{"StorageImagesCreate", "POST", "/storage/images/create"},
			{"StorageImagesDelete", "POST", "/storage/images/delete"},
			{"StorageImagesGet", "GET", "/storage/images/get"},
		},
		VMCreate:             NewVMCreateHandler(e.VMCreate, mux, decoder, encoder, errhandler, formatter),
		VMUpdate:             NewVMUpdateHandler(e.VMUpdate, mux, decoder, encoder, errhandler, formatter),
		VMDelete:             NewVMDeleteHandler(e.VMDelete, mux, decoder, encoder, errhandler, formatter),
		VMGet:                NewVMGetHandler(e.VMGet, mux, decoder, encoder, errhandler, formatter),
		VMList:               NewVMListHandler(e.VMList, mux, decoder, encoder, errhandler, formatter),
		StorageVolumesList:   NewStorageVolumesListHandler(e.StorageVolumesList, mux, decoder, encoder, errhandler, formatter),
		StorageVolumesCreate: NewStorageVolumesCreateHandler(e.StorageVolumesCreate, mux, decoder, encoder, errhandler, formatter),
		StorageVolumesDelete: NewStorageVolumesDeleteHandler(e.StorageVolumesDelete, mux, decoder, encoder, errhandler, formatter),
		StorageImagesList:    NewStorageImagesListHandler(e.StorageImagesList, mux, decoder, encoder, errhandler, formatter),
		StorageImagesCreate:  NewStorageImagesCreateHandler(e.StorageImagesCreate, mux, decoder, encoder, errhandler, formatter),
		StorageImagesDelete:  NewStorageImagesDeleteHandler(e.StorageImagesDelete, mux, decoder, encoder, errhandler, formatter),
		StorageImagesGet:     NewStorageImagesGetHandler(e.StorageImagesGet, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "spin-registry" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.VMCreate = m(s.VMCreate)
	s.VMUpdate = m(s.VMUpdate)
	s.VMDelete = m(s.VMDelete)
	s.VMGet = m(s.VMGet)
	s.VMList = m(s.VMList)
	s.StorageVolumesList = m(s.StorageVolumesList)
	s.StorageVolumesCreate = m(s.StorageVolumesCreate)
	s.StorageVolumesDelete = m(s.StorageVolumesDelete)
	s.StorageImagesList = m(s.StorageImagesList)
	s.StorageImagesCreate = m(s.StorageImagesCreate)
	s.StorageImagesDelete = m(s.StorageImagesDelete)
	s.StorageImagesGet = m(s.StorageImagesGet)
}

// Mount configures the mux to serve the spin-registry endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountVMCreateHandler(mux, h.VMCreate)
	MountVMUpdateHandler(mux, h.VMUpdate)
	MountVMDeleteHandler(mux, h.VMDelete)
	MountVMGetHandler(mux, h.VMGet)
	MountVMListHandler(mux, h.VMList)
	MountStorageVolumesListHandler(mux, h.StorageVolumesList)
	MountStorageVolumesCreateHandler(mux, h.StorageVolumesCreate)
	MountStorageVolumesDeleteHandler(mux, h.StorageVolumesDelete)
	MountStorageImagesListHandler(mux, h.StorageImagesList)
	MountStorageImagesCreateHandler(mux, h.StorageImagesCreate)
	MountStorageImagesDeleteHandler(mux, h.StorageImagesDelete)
	MountStorageImagesGetHandler(mux, h.StorageImagesGet)
}

// MountVMCreateHandler configures the mux to serve the "spin-registry" service
// "vm_create" endpoint.
func MountVMCreateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/vm/create", f)
}

// NewVMCreateHandler creates a HTTP handler which loads the HTTP request and
// calls the "spin-registry" service "vm_create" endpoint.
func NewVMCreateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeVMCreateRequest(mux, decoder)
		encodeResponse = EncodeVMCreateResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "vm_create")
		ctx = context.WithValue(ctx, goa.ServiceKey, "spin-registry")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountVMUpdateHandler configures the mux to serve the "spin-registry" service
// "vm_update" endpoint.
func MountVMUpdateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/vm/update/{id}", f)
}

// NewVMUpdateHandler creates a HTTP handler which loads the HTTP request and
// calls the "spin-registry" service "vm_update" endpoint.
func NewVMUpdateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeVMUpdateRequest(mux, decoder)
		encodeResponse = EncodeVMUpdateResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "vm_update")
		ctx = context.WithValue(ctx, goa.ServiceKey, "spin-registry")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountVMDeleteHandler configures the mux to serve the "spin-registry" service
// "vm_delete" endpoint.
func MountVMDeleteHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/vm/delete/{id}", f)
}

// NewVMDeleteHandler creates a HTTP handler which loads the HTTP request and
// calls the "spin-registry" service "vm_delete" endpoint.
func NewVMDeleteHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeVMDeleteRequest(mux, decoder)
		encodeResponse = EncodeVMDeleteResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "vm_delete")
		ctx = context.WithValue(ctx, goa.ServiceKey, "spin-registry")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountVMGetHandler configures the mux to serve the "spin-registry" service
// "vm_get" endpoint.
func MountVMGetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/vm/get/{id}", f)
}

// NewVMGetHandler creates a HTTP handler which loads the HTTP request and
// calls the "spin-registry" service "vm_get" endpoint.
func NewVMGetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeVMGetRequest(mux, decoder)
		encodeResponse = EncodeVMGetResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "vm_get")
		ctx = context.WithValue(ctx, goa.ServiceKey, "spin-registry")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountVMListHandler configures the mux to serve the "spin-registry" service
// "vm_list" endpoint.
func MountVMListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/vm/list", f)
}

// NewVMListHandler creates a HTTP handler which loads the HTTP request and
// calls the "spin-registry" service "vm_list" endpoint.
func NewVMListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeVMListResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "vm_list")
		ctx = context.WithValue(ctx, goa.ServiceKey, "spin-registry")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountStorageVolumesListHandler configures the mux to serve the
// "spin-registry" service "storage_volumes_list" endpoint.
func MountStorageVolumesListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/storage/volumes/list", f)
}

// NewStorageVolumesListHandler creates a HTTP handler which loads the HTTP
// request and calls the "spin-registry" service "storage_volumes_list"
// endpoint.
func NewStorageVolumesListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeStorageVolumesListResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "storage_volumes_list")
		ctx = context.WithValue(ctx, goa.ServiceKey, "spin-registry")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountStorageVolumesCreateHandler configures the mux to serve the
// "spin-registry" service "storage_volumes_create" endpoint.
func MountStorageVolumesCreateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/storage/volumes/create", f)
}

// NewStorageVolumesCreateHandler creates a HTTP handler which loads the HTTP
// request and calls the "spin-registry" service "storage_volumes_create"
// endpoint.
func NewStorageVolumesCreateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeStorageVolumesCreateRequest(mux, decoder)
		encodeResponse = EncodeStorageVolumesCreateResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "storage_volumes_create")
		ctx = context.WithValue(ctx, goa.ServiceKey, "spin-registry")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountStorageVolumesDeleteHandler configures the mux to serve the
// "spin-registry" service "storage_volumes_delete" endpoint.
func MountStorageVolumesDeleteHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/storage/volumes/delete", f)
}

// NewStorageVolumesDeleteHandler creates a HTTP handler which loads the HTTP
// request and calls the "spin-registry" service "storage_volumes_delete"
// endpoint.
func NewStorageVolumesDeleteHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeStorageVolumesDeleteRequest(mux, decoder)
		encodeResponse = EncodeStorageVolumesDeleteResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "storage_volumes_delete")
		ctx = context.WithValue(ctx, goa.ServiceKey, "spin-registry")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountStorageImagesListHandler configures the mux to serve the
// "spin-registry" service "storage_images_list" endpoint.
func MountStorageImagesListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/storage/images/list", f)
}

// NewStorageImagesListHandler creates a HTTP handler which loads the HTTP
// request and calls the "spin-registry" service "storage_images_list" endpoint.
func NewStorageImagesListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeStorageImagesListRequest(mux, decoder)
		encodeResponse = EncodeStorageImagesListResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "storage_images_list")
		ctx = context.WithValue(ctx, goa.ServiceKey, "spin-registry")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountStorageImagesCreateHandler configures the mux to serve the
// "spin-registry" service "storage_images_create" endpoint.
func MountStorageImagesCreateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/storage/images/create", f)
}

// NewStorageImagesCreateHandler creates a HTTP handler which loads the HTTP
// request and calls the "spin-registry" service "storage_images_create"
// endpoint.
func NewStorageImagesCreateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeStorageImagesCreateRequest(mux, decoder)
		encodeResponse = EncodeStorageImagesCreateResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "storage_images_create")
		ctx = context.WithValue(ctx, goa.ServiceKey, "spin-registry")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountStorageImagesDeleteHandler configures the mux to serve the
// "spin-registry" service "storage_images_delete" endpoint.
func MountStorageImagesDeleteHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/storage/images/delete", f)
}

// NewStorageImagesDeleteHandler creates a HTTP handler which loads the HTTP
// request and calls the "spin-registry" service "storage_images_delete"
// endpoint.
func NewStorageImagesDeleteHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeStorageImagesDeleteRequest(mux, decoder)
		encodeResponse = EncodeStorageImagesDeleteResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "storage_images_delete")
		ctx = context.WithValue(ctx, goa.ServiceKey, "spin-registry")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountStorageImagesGetHandler configures the mux to serve the "spin-registry"
// service "storage_images_get" endpoint.
func MountStorageImagesGetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/storage/images/get", f)
}

// NewStorageImagesGetHandler creates a HTTP handler which loads the HTTP
// request and calls the "spin-registry" service "storage_images_get" endpoint.
func NewStorageImagesGetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeStorageImagesGetRequest(mux, decoder)
		encodeResponse = EncodeStorageImagesGetResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "storage_images_get")
		ctx = context.WithValue(ctx, goa.ServiceKey, "spin-registry")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
