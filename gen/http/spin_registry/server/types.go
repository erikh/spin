// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-registry HTTP server types
//
// Command:
// $ goa gen github.com/erikh/spin/design

package server

import (
	spinregistry "github.com/erikh/spin/gen/spin_registry"
	"github.com/erikh/spin/pkg/vm"
	goa "goa.design/goa/v3/pkg"
)

// VMUpdateRequestBody is the type of the "spin-registry" service "vm_update"
// endpoint HTTP request body.
type VMUpdateRequestBody struct {
	// vm to update
	VM *vm.Transient `form:"vm,omitempty" json:"vm,omitempty" xml:"vm,omitempty"`
}

// StorageVolumesCreateRequestBody is the type of the "spin-registry" service
// "storage_volumes_create" endpoint HTTP request body.
type StorageVolumesCreateRequestBody struct {
	// name of volume
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// path to volume
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
}

// StorageVolumesDeleteRequestBody is the type of the "spin-registry" service
// "storage_volumes_delete" endpoint HTTP request body.
type StorageVolumesDeleteRequestBody struct {
	// name of volume
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// StorageImagesListRequestBody is the type of the "spin-registry" service
// "storage_images_list" endpoint HTTP request body.
type StorageImagesListRequestBody struct {
	// name of volume to list images for
	VolumeName *string `form:"volume_name,omitempty" json:"volume_name,omitempty" xml:"volume_name,omitempty"`
}

// StorageImagesDeleteRequestBody is the type of the "spin-registry" service
// "storage_images_delete" endpoint HTTP request body.
type StorageImagesDeleteRequestBody struct {
	// name of volume
	VolumeName *string `form:"volume_name,omitempty" json:"volume_name,omitempty" xml:"volume_name,omitempty"`
	// name of image
	ImageName *string `form:"image_name,omitempty" json:"image_name,omitempty" xml:"image_name,omitempty"`
}

// StorageImagesGetRequestBody is the type of the "spin-registry" service
// "storage_images_get" endpoint HTTP request body.
type StorageImagesGetRequestBody struct {
	// name of volume
	VolumeName *string `form:"volume_name,omitempty" json:"volume_name,omitempty" xml:"volume_name,omitempty"`
	// name of image
	ImageName *string `form:"image_name,omitempty" json:"image_name,omitempty" xml:"image_name,omitempty"`
}

// NewVMUpdateUpdateVM builds a spin-registry service vm_update endpoint
// payload.
func NewVMUpdateUpdateVM(body *VMUpdateRequestBody, id uint64) *spinregistry.UpdateVM {
	v := &spinregistry.UpdateVM{
		VM: body.VM,
	}
	v.ID = id

	return v
}

// NewVMDeletePayload builds a spin-registry service vm_delete endpoint payload.
func NewVMDeletePayload(id uint64) *spinregistry.VMDeletePayload {
	v := &spinregistry.VMDeletePayload{}
	v.ID = id

	return v
}

// NewVMGetPayload builds a spin-registry service vm_get endpoint payload.
func NewVMGetPayload(id uint64) *spinregistry.VMGetPayload {
	v := &spinregistry.VMGetPayload{}
	v.ID = id

	return v
}

// NewStorageVolumesCreatePayload builds a spin-registry service
// storage_volumes_create endpoint payload.
func NewStorageVolumesCreatePayload(body *StorageVolumesCreateRequestBody) *spinregistry.StorageVolumesCreatePayload {
	v := &spinregistry.StorageVolumesCreatePayload{
		Name: *body.Name,
		Path: *body.Path,
	}

	return v
}

// NewStorageVolumesDeletePayload builds a spin-registry service
// storage_volumes_delete endpoint payload.
func NewStorageVolumesDeletePayload(body *StorageVolumesDeleteRequestBody) *spinregistry.StorageVolumesDeletePayload {
	v := &spinregistry.StorageVolumesDeletePayload{
		Name: *body.Name,
	}

	return v
}

// NewStorageImagesListPayload builds a spin-registry service
// storage_images_list endpoint payload.
func NewStorageImagesListPayload(body *StorageImagesListRequestBody) *spinregistry.StorageImagesListPayload {
	v := &spinregistry.StorageImagesListPayload{
		VolumeName: *body.VolumeName,
	}

	return v
}

// NewStorageImagesDeletePayload builds a spin-registry service
// storage_images_delete endpoint payload.
func NewStorageImagesDeletePayload(body *StorageImagesDeleteRequestBody) *spinregistry.StorageImagesDeletePayload {
	v := &spinregistry.StorageImagesDeletePayload{
		VolumeName: *body.VolumeName,
		ImageName:  *body.ImageName,
	}

	return v
}

// NewStorageImagesGetPayload builds a spin-registry service storage_images_get
// endpoint payload.
func NewStorageImagesGetPayload(body *StorageImagesGetRequestBody) *spinregistry.StorageImagesGetPayload {
	v := &spinregistry.StorageImagesGetPayload{
		VolumeName: *body.VolumeName,
		ImageName:  *body.ImageName,
	}

	return v
}

// ValidateVMUpdateRequestBody runs the validations defined on
// vm_update_request_body
func ValidateVMUpdateRequestBody(body *VMUpdateRequestBody) (err error) {
	if body.VM == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("vm", "body"))
	}
	return
}

// ValidateStorageVolumesCreateRequestBody runs the validations defined on
// storage_volumes_create_request_body
func ValidateStorageVolumesCreateRequestBody(body *StorageVolumesCreateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Path == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("path", "body"))
	}
	return
}

// ValidateStorageVolumesDeleteRequestBody runs the validations defined on
// storage_volumes_delete_request_body
func ValidateStorageVolumesDeleteRequestBody(body *StorageVolumesDeleteRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateStorageImagesListRequestBody runs the validations defined on
// storage_images_list_request_body
func ValidateStorageImagesListRequestBody(body *StorageImagesListRequestBody) (err error) {
	if body.VolumeName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("volume_name", "body"))
	}
	return
}

// ValidateStorageImagesDeleteRequestBody runs the validations defined on
// storage_images_delete_request_body
func ValidateStorageImagesDeleteRequestBody(body *StorageImagesDeleteRequestBody) (err error) {
	if body.VolumeName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("volume_name", "body"))
	}
	if body.ImageName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image_name", "body"))
	}
	return
}

// ValidateStorageImagesGetRequestBody runs the validations defined on
// storage_images_get_request_body
func ValidateStorageImagesGetRequestBody(body *StorageImagesGetRequestBody) (err error) {
	if body.VolumeName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("volume_name", "body"))
	}
	if body.ImageName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image_name", "body"))
	}
	return
}
