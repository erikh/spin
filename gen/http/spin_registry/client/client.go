// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-registry client HTTP transport
//
// Command:
// $ goa gen github.com/erikh/spin/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the spin-registry service endpoint HTTP clients.
type Client struct {
	// VMCreate Doer is the HTTP client used to make requests to the vm_create
	// endpoint.
	VMCreateDoer goahttp.Doer

	// VMUpdate Doer is the HTTP client used to make requests to the vm_update
	// endpoint.
	VMUpdateDoer goahttp.Doer

	// VMDelete Doer is the HTTP client used to make requests to the vm_delete
	// endpoint.
	VMDeleteDoer goahttp.Doer

	// VMGet Doer is the HTTP client used to make requests to the vm_get endpoint.
	VMGetDoer goahttp.Doer

	// VMList Doer is the HTTP client used to make requests to the vm_list endpoint.
	VMListDoer goahttp.Doer

	// StorageVolumesList Doer is the HTTP client used to make requests to the
	// storage_volumes_list endpoint.
	StorageVolumesListDoer goahttp.Doer

	// StorageVolumesCreate Doer is the HTTP client used to make requests to the
	// storage_volumes_create endpoint.
	StorageVolumesCreateDoer goahttp.Doer

	// StorageVolumesDelete Doer is the HTTP client used to make requests to the
	// storage_volumes_delete endpoint.
	StorageVolumesDeleteDoer goahttp.Doer

	// StorageImagesList Doer is the HTTP client used to make requests to the
	// storage_images_list endpoint.
	StorageImagesListDoer goahttp.Doer

	// StorageImagesCreate Doer is the HTTP client used to make requests to the
	// storage_images_create endpoint.
	StorageImagesCreateDoer goahttp.Doer

	// StorageImagesDelete Doer is the HTTP client used to make requests to the
	// storage_images_delete endpoint.
	StorageImagesDeleteDoer goahttp.Doer

	// StorageImagesGet Doer is the HTTP client used to make requests to the
	// storage_images_get endpoint.
	StorageImagesGetDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the spin-registry service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		VMCreateDoer:             doer,
		VMUpdateDoer:             doer,
		VMDeleteDoer:             doer,
		VMGetDoer:                doer,
		VMListDoer:               doer,
		StorageVolumesListDoer:   doer,
		StorageVolumesCreateDoer: doer,
		StorageVolumesDeleteDoer: doer,
		StorageImagesListDoer:    doer,
		StorageImagesCreateDoer:  doer,
		StorageImagesDeleteDoer:  doer,
		StorageImagesGetDoer:     doer,
		RestoreResponseBody:      restoreBody,
		scheme:                   scheme,
		host:                     host,
		decoder:                  dec,
		encoder:                  enc,
	}
}

// VMCreate returns an endpoint that makes HTTP requests to the spin-registry
// service vm_create server.
func (c *Client) VMCreate() goa.Endpoint {
	var (
		encodeRequest  = EncodeVMCreateRequest(c.encoder)
		decodeResponse = DecodeVMCreateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildVMCreateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VMCreateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-registry", "vm_create", err)
		}
		return decodeResponse(resp)
	}
}

// VMUpdate returns an endpoint that makes HTTP requests to the spin-registry
// service vm_update server.
func (c *Client) VMUpdate() goa.Endpoint {
	var (
		encodeRequest  = EncodeVMUpdateRequest(c.encoder)
		decodeResponse = DecodeVMUpdateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildVMUpdateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VMUpdateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-registry", "vm_update", err)
		}
		return decodeResponse(resp)
	}
}

// VMDelete returns an endpoint that makes HTTP requests to the spin-registry
// service vm_delete server.
func (c *Client) VMDelete() goa.Endpoint {
	var (
		decodeResponse = DecodeVMDeleteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildVMDeleteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VMDeleteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-registry", "vm_delete", err)
		}
		return decodeResponse(resp)
	}
}

// VMGet returns an endpoint that makes HTTP requests to the spin-registry
// service vm_get server.
func (c *Client) VMGet() goa.Endpoint {
	var (
		decodeResponse = DecodeVMGetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildVMGetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VMGetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-registry", "vm_get", err)
		}
		return decodeResponse(resp)
	}
}

// VMList returns an endpoint that makes HTTP requests to the spin-registry
// service vm_list server.
func (c *Client) VMList() goa.Endpoint {
	var (
		decodeResponse = DecodeVMListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildVMListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VMListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-registry", "vm_list", err)
		}
		return decodeResponse(resp)
	}
}

// StorageVolumesList returns an endpoint that makes HTTP requests to the
// spin-registry service storage_volumes_list server.
func (c *Client) StorageVolumesList() goa.Endpoint {
	var (
		decodeResponse = DecodeStorageVolumesListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildStorageVolumesListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.StorageVolumesListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-registry", "storage_volumes_list", err)
		}
		return decodeResponse(resp)
	}
}

// StorageVolumesCreate returns an endpoint that makes HTTP requests to the
// spin-registry service storage_volumes_create server.
func (c *Client) StorageVolumesCreate() goa.Endpoint {
	var (
		encodeRequest  = EncodeStorageVolumesCreateRequest(c.encoder)
		decodeResponse = DecodeStorageVolumesCreateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildStorageVolumesCreateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.StorageVolumesCreateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-registry", "storage_volumes_create", err)
		}
		return decodeResponse(resp)
	}
}

// StorageVolumesDelete returns an endpoint that makes HTTP requests to the
// spin-registry service storage_volumes_delete server.
func (c *Client) StorageVolumesDelete() goa.Endpoint {
	var (
		encodeRequest  = EncodeStorageVolumesDeleteRequest(c.encoder)
		decodeResponse = DecodeStorageVolumesDeleteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildStorageVolumesDeleteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.StorageVolumesDeleteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-registry", "storage_volumes_delete", err)
		}
		return decodeResponse(resp)
	}
}

// StorageImagesList returns an endpoint that makes HTTP requests to the
// spin-registry service storage_images_list server.
func (c *Client) StorageImagesList() goa.Endpoint {
	var (
		encodeRequest  = EncodeStorageImagesListRequest(c.encoder)
		decodeResponse = DecodeStorageImagesListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildStorageImagesListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.StorageImagesListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-registry", "storage_images_list", err)
		}
		return decodeResponse(resp)
	}
}

// StorageImagesCreate returns an endpoint that makes HTTP requests to the
// spin-registry service storage_images_create server.
func (c *Client) StorageImagesCreate() goa.Endpoint {
	var (
		encodeRequest  = EncodeStorageImagesCreateRequest(c.encoder)
		decodeResponse = DecodeStorageImagesCreateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildStorageImagesCreateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.StorageImagesCreateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-registry", "storage_images_create", err)
		}
		return decodeResponse(resp)
	}
}

// StorageImagesDelete returns an endpoint that makes HTTP requests to the
// spin-registry service storage_images_delete server.
func (c *Client) StorageImagesDelete() goa.Endpoint {
	var (
		encodeRequest  = EncodeStorageImagesDeleteRequest(c.encoder)
		decodeResponse = DecodeStorageImagesDeleteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildStorageImagesDeleteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.StorageImagesDeleteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-registry", "storage_images_delete", err)
		}
		return decodeResponse(resp)
	}
}

// StorageImagesGet returns an endpoint that makes HTTP requests to the
// spin-registry service storage_images_get server.
func (c *Client) StorageImagesGet() goa.Endpoint {
	var (
		encodeRequest  = EncodeStorageImagesGetRequest(c.encoder)
		decodeResponse = DecodeStorageImagesGetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildStorageImagesGetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.StorageImagesGetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("spin-registry", "storage_images_get", err)
		}
		return decodeResponse(resp)
	}
}
