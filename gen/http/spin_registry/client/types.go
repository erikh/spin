// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-registry HTTP client types
//
// Command:
// $ goa gen github.com/erikh/spin/design

package client

import (
	spinregistry "github.com/erikh/spin/gen/spin_registry"
	"github.com/erikh/spin/pkg/vm"
)

// VMUpdateRequestBody is the type of the "spin-registry" service "vm_update"
// endpoint HTTP request body.
type VMUpdateRequestBody struct {
	// vm to update
	VM *vm.Transient `form:"vm" json:"vm" xml:"vm"`
}

// StorageVolumesCreateRequestBody is the type of the "spin-registry" service
// "storage_volumes_create" endpoint HTTP request body.
type StorageVolumesCreateRequestBody struct {
	// name of volume
	Name string `form:"name" json:"name" xml:"name"`
	// path to volume
	Path string `form:"path" json:"path" xml:"path"`
}

// StorageVolumesDeleteRequestBody is the type of the "spin-registry" service
// "storage_volumes_delete" endpoint HTTP request body.
type StorageVolumesDeleteRequestBody struct {
	// name of volume
	Name string `form:"name" json:"name" xml:"name"`
}

// StorageImagesListRequestBody is the type of the "spin-registry" service
// "storage_images_list" endpoint HTTP request body.
type StorageImagesListRequestBody struct {
	// name of volume to list images for
	VolumeName string `form:"volume_name" json:"volume_name" xml:"volume_name"`
}

// StorageImagesDeleteRequestBody is the type of the "spin-registry" service
// "storage_images_delete" endpoint HTTP request body.
type StorageImagesDeleteRequestBody struct {
	// name of volume
	VolumeName string `form:"volume_name" json:"volume_name" xml:"volume_name"`
	// name of image
	ImageName string `form:"image_name" json:"image_name" xml:"image_name"`
}

// StorageImagesGetRequestBody is the type of the "spin-registry" service
// "storage_images_get" endpoint HTTP request body.
type StorageImagesGetRequestBody struct {
	// name of volume
	VolumeName string `form:"volume_name" json:"volume_name" xml:"volume_name"`
	// name of image
	ImageName string `form:"image_name" json:"image_name" xml:"image_name"`
}

// NewVMUpdateRequestBody builds the HTTP request body from the payload of the
// "vm_update" endpoint of the "spin-registry" service.
func NewVMUpdateRequestBody(p *spinregistry.UpdateVM) *VMUpdateRequestBody {
	body := &VMUpdateRequestBody{
		VM: p.VM,
	}
	return body
}

// NewStorageVolumesCreateRequestBody builds the HTTP request body from the
// payload of the "storage_volumes_create" endpoint of the "spin-registry"
// service.
func NewStorageVolumesCreateRequestBody(p *spinregistry.StorageVolumesCreatePayload) *StorageVolumesCreateRequestBody {
	body := &StorageVolumesCreateRequestBody{
		Name: p.Name,
		Path: p.Path,
	}
	return body
}

// NewStorageVolumesDeleteRequestBody builds the HTTP request body from the
// payload of the "storage_volumes_delete" endpoint of the "spin-registry"
// service.
func NewStorageVolumesDeleteRequestBody(p *spinregistry.StorageVolumesDeletePayload) *StorageVolumesDeleteRequestBody {
	body := &StorageVolumesDeleteRequestBody{
		Name: p.Name,
	}
	return body
}

// NewStorageImagesListRequestBody builds the HTTP request body from the
// payload of the "storage_images_list" endpoint of the "spin-registry" service.
func NewStorageImagesListRequestBody(p *spinregistry.StorageImagesListPayload) *StorageImagesListRequestBody {
	body := &StorageImagesListRequestBody{
		VolumeName: p.VolumeName,
	}
	return body
}

// NewStorageImagesDeleteRequestBody builds the HTTP request body from the
// payload of the "storage_images_delete" endpoint of the "spin-registry"
// service.
func NewStorageImagesDeleteRequestBody(p *spinregistry.StorageImagesDeletePayload) *StorageImagesDeleteRequestBody {
	body := &StorageImagesDeleteRequestBody{
		VolumeName: p.VolumeName,
		ImageName:  p.ImageName,
	}
	return body
}

// NewStorageImagesGetRequestBody builds the HTTP request body from the payload
// of the "storage_images_get" endpoint of the "spin-registry" service.
func NewStorageImagesGetRequestBody(p *spinregistry.StorageImagesGetPayload) *StorageImagesGetRequestBody {
	body := &StorageImagesGetRequestBody{
		VolumeName: p.VolumeName,
		ImageName:  p.ImageName,
	}
	return body
}
