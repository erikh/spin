// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-registry HTTP client CLI support package
//
// Command:
// $ goa gen code.hollensbe.org/erikh/spin/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	spinregistry "code.hollensbe.org/erikh/spin/gen/spin_registry"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the spin-registry create endpoint
// from CLI flags.
func BuildCreatePayload(spinRegistryCreateBody string) (*spinregistry.VM, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(spinRegistryCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"cpus\": 11176502060165847513,\n      \"memory\": 15107782813490131477,\n      \"name\": \"Nihil vitae nesciunt.\",\n      \"storage\": [\n         {\n            \"image\": \"Expedita a.\",\n            \"image_size\": 13160086984666010830,\n            \"volume\": \"Et nobis quia neque excepturi.\"\n         },\n         {\n            \"image\": \"Expedita a.\",\n            \"image_size\": 13160086984666010830,\n            \"volume\": \"Et nobis quia neque excepturi.\"\n         },\n         {\n            \"image\": \"Expedita a.\",\n            \"image_size\": 13160086984666010830,\n            \"volume\": \"Et nobis quia neque excepturi.\"\n         }\n      ]\n   }'")
		}
		if body.Storage == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("storage", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &spinregistry.VM{
		Name:   body.Name,
		Cpus:   body.Cpus,
		Memory: body.Memory,
	}
	if body.Storage != nil {
		v.Storage = make([]*spinregistry.Storage, len(body.Storage))
		for i, val := range body.Storage {
			v.Storage[i] = marshalStorageRequestBodyToSpinregistryStorage(val)
		}
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the spin-registry update endpoint
// from CLI flags.
func BuildUpdatePayload(spinRegistryUpdateBody string, spinRegistryUpdateID string) (*spinregistry.UpdateVM, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(spinRegistryUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"cpus\": 13225308882234053238,\n      \"memory\": 13801504870798650692,\n      \"name\": \"Vel qui vel qui dolores nihil.\",\n      \"storage\": [\n         {\n            \"image\": \"Expedita a.\",\n            \"image_size\": 13160086984666010830,\n            \"volume\": \"Et nobis quia neque excepturi.\"\n         },\n         {\n            \"image\": \"Expedita a.\",\n            \"image_size\": 13160086984666010830,\n            \"volume\": \"Et nobis quia neque excepturi.\"\n         },\n         {\n            \"image\": \"Expedita a.\",\n            \"image_size\": 13160086984666010830,\n            \"volume\": \"Et nobis quia neque excepturi.\"\n         }\n      ]\n   }'")
		}
		if body.Storage == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("storage", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint64
	{
		id, err = strconv.ParseUint(spinRegistryUpdateID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT64")
		}
	}
	v := &spinregistry.UpdateVM{
		Name:   body.Name,
		Cpus:   body.Cpus,
		Memory: body.Memory,
	}
	if body.Storage != nil {
		v.Storage = make([]*spinregistry.Storage, len(body.Storage))
		for i, val := range body.Storage {
			v.Storage[i] = marshalStorageRequestBodyToSpinregistryStorage(val)
		}
	}
	v.ID = id

	return v, nil
}

// BuildDeletePayload builds the payload for the spin-registry delete endpoint
// from CLI flags.
func BuildDeletePayload(spinRegistryDeleteID string) (*spinregistry.DeletePayload, error) {
	var err error
	var id uint64
	{
		id, err = strconv.ParseUint(spinRegistryDeleteID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT64")
		}
	}
	v := &spinregistry.DeletePayload{}
	v.ID = &id

	return v, nil
}

// BuildGetPayload builds the payload for the spin-registry get endpoint from
// CLI flags.
func BuildGetPayload(spinRegistryGetID string) (*spinregistry.GetPayload, error) {
	var err error
	var id uint64
	{
		id, err = strconv.ParseUint(spinRegistryGetID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT64")
		}
	}
	v := &spinregistry.GetPayload{}
	v.ID = &id

	return v, nil
}
