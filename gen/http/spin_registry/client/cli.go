// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-registry HTTP client CLI support package
//
// Command:
// $ goa gen code.hollensbe.org/erikh/spin/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	spinregistry "code.hollensbe.org/erikh/spin/gen/spin_registry"
	goa "goa.design/goa/v3/pkg"
)

// BuildVMCreatePayload builds the payload for the spin-registry vm_create
// endpoint from CLI flags.
func BuildVMCreatePayload(spinRegistryVMCreateBody string) (*spinregistry.UpdatedVM, error) {
	var err error
	var body VMCreateRequestBody
	{
		err = json.Unmarshal([]byte(spinRegistryVMCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"cpus\": 4597833110689897909,\n      \"images\": [\n         {\n            \"cdrom\": true,\n            \"path\": \"Esse labore voluptas.\",\n            \"volume\": \"Iusto adipisci sapiente temporibus.\"\n         },\n         {\n            \"cdrom\": true,\n            \"path\": \"Esse labore voluptas.\",\n            \"volume\": \"Iusto adipisci sapiente temporibus.\"\n         },\n         {\n            \"cdrom\": true,\n            \"path\": \"Esse labore voluptas.\",\n            \"volume\": \"Iusto adipisci sapiente temporibus.\"\n         }\n      ],\n      \"memory\": 1361587778145021448,\n      \"name\": \"Aut minima recusandae et.\"\n   }'")
		}
		if body.Images == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("images", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &spinregistry.UpdatedVM{
		Name:   body.Name,
		Cpus:   body.Cpus,
		Memory: body.Memory,
	}
	if body.Images != nil {
		v.Images = make([]*spinregistry.Image, len(body.Images))
		for i, val := range body.Images {
			v.Images[i] = marshalImageRequestBodyToSpinregistryImage(val)
		}
	}

	return v, nil
}

// BuildVMUpdatePayload builds the payload for the spin-registry vm_update
// endpoint from CLI flags.
func BuildVMUpdatePayload(spinRegistryVMUpdateBody string, spinRegistryVMUpdateID string) (*spinregistry.UpdateVM, error) {
	var err error
	var body VMUpdateRequestBody
	{
		err = json.Unmarshal([]byte(spinRegistryVMUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"vm\": {\n         \"cpus\": 6629117394574779493,\n         \"images\": [\n            {\n               \"cdrom\": true,\n               \"path\": \"Esse labore voluptas.\",\n               \"volume\": \"Iusto adipisci sapiente temporibus.\"\n            },\n            {\n               \"cdrom\": true,\n               \"path\": \"Esse labore voluptas.\",\n               \"volume\": \"Iusto adipisci sapiente temporibus.\"\n            },\n            {\n               \"cdrom\": true,\n               \"path\": \"Esse labore voluptas.\",\n               \"volume\": \"Iusto adipisci sapiente temporibus.\"\n            }\n         ],\n         \"memory\": 2368394357671877291,\n         \"name\": \"Magni voluptas corrupti et voluptatibus et.\"\n      }\n   }'")
		}
		if body.VM == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("vm", "body"))
		}
		if body.VM != nil {
			if err2 := ValidateUpdatedVMRequestBody(body.VM); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var id uint64
	{
		id, err = strconv.ParseUint(spinRegistryVMUpdateID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT64")
		}
	}
	v := &spinregistry.UpdateVM{}
	if body.VM != nil {
		v.VM = marshalUpdatedVMRequestBodyToSpinregistryUpdatedVM(body.VM)
	}
	v.ID = id

	return v, nil
}

// BuildVMDeletePayload builds the payload for the spin-registry vm_delete
// endpoint from CLI flags.
func BuildVMDeletePayload(spinRegistryVMDeleteID string) (*spinregistry.VMDeletePayload, error) {
	var err error
	var id uint64
	{
		id, err = strconv.ParseUint(spinRegistryVMDeleteID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT64")
		}
	}
	v := &spinregistry.VMDeletePayload{}
	v.ID = id

	return v, nil
}

// BuildVMGetPayload builds the payload for the spin-registry vm_get endpoint
// from CLI flags.
func BuildVMGetPayload(spinRegistryVMGetID string) (*spinregistry.VMGetPayload, error) {
	var err error
	var id uint64
	{
		id, err = strconv.ParseUint(spinRegistryVMGetID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT64")
		}
	}
	v := &spinregistry.VMGetPayload{}
	v.ID = id

	return v, nil
}

// BuildStorageVolumesCreatePayload builds the payload for the spin-registry
// storage_volumes_create endpoint from CLI flags.
func BuildStorageVolumesCreatePayload(spinRegistryStorageVolumesCreateBody string) (*spinregistry.StorageVolumesCreatePayload, error) {
	var err error
	var body StorageVolumesCreateRequestBody
	{
		err = json.Unmarshal([]byte(spinRegistryStorageVolumesCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Molestiae asperiores.\",\n      \"path\": \"Temporibus explicabo sit ab quo et quis.\"\n   }'")
		}
	}
	v := &spinregistry.StorageVolumesCreatePayload{
		Name: body.Name,
		Path: body.Path,
	}

	return v, nil
}

// BuildStorageVolumesDeletePayload builds the payload for the spin-registry
// storage_volumes_delete endpoint from CLI flags.
func BuildStorageVolumesDeletePayload(spinRegistryStorageVolumesDeleteBody string) (*spinregistry.StorageVolumesDeletePayload, error) {
	var err error
	var body StorageVolumesDeleteRequestBody
	{
		err = json.Unmarshal([]byte(spinRegistryStorageVolumesDeleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Nulla numquam rerum asperiores corporis aut enim.\"\n   }'")
		}
	}
	v := &spinregistry.StorageVolumesDeletePayload{
		Name: body.Name,
	}

	return v, nil
}

// BuildStorageImagesListPayload builds the payload for the spin-registry
// storage_images_list endpoint from CLI flags.
func BuildStorageImagesListPayload(spinRegistryStorageImagesListBody string) (*spinregistry.StorageImagesListPayload, error) {
	var err error
	var body StorageImagesListRequestBody
	{
		err = json.Unmarshal([]byte(spinRegistryStorageImagesListBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"volume_name\": \"Ipsa enim non maxime est.\"\n   }'")
		}
	}
	v := &spinregistry.StorageImagesListPayload{
		VolumeName: body.VolumeName,
	}

	return v, nil
}

// BuildStorageImagesCreatePayload builds the payload for the spin-registry
// storage_images_create endpoint from CLI flags.
func BuildStorageImagesCreatePayload(spinRegistryStorageImagesCreateBody string) (*spinregistry.Storage, error) {
	var err error
	var body StorageImagesCreateRequestBody
	{
		err = json.Unmarshal([]byte(spinRegistryStorageImagesCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"cdrom\": true,\n      \"image\": \"Quia facere.\",\n      \"image_size\": 8415715876711929459,\n      \"volume\": \"Facilis ad quod.\"\n   }'")
		}
	}
	v := &spinregistry.Storage{
		Volume:    body.Volume,
		Image:     body.Image,
		ImageSize: body.ImageSize,
		Cdrom:     body.Cdrom,
	}

	return v, nil
}

// BuildStorageImagesDeletePayload builds the payload for the spin-registry
// storage_images_delete endpoint from CLI flags.
func BuildStorageImagesDeletePayload(spinRegistryStorageImagesDeleteBody string) (*spinregistry.StorageImagesDeletePayload, error) {
	var err error
	var body StorageImagesDeleteRequestBody
	{
		err = json.Unmarshal([]byte(spinRegistryStorageImagesDeleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"image_name\": \"Fugit incidunt tempora.\",\n      \"volume_name\": \"Aut quis vel officia.\"\n   }'")
		}
	}
	v := &spinregistry.StorageImagesDeletePayload{
		VolumeName: body.VolumeName,
		ImageName:  body.ImageName,
	}

	return v, nil
}

// BuildStorageImagesGetPayload builds the payload for the spin-registry
// storage_images_get endpoint from CLI flags.
func BuildStorageImagesGetPayload(spinRegistryStorageImagesGetBody string) (*spinregistry.StorageImagesGetPayload, error) {
	var err error
	var body StorageImagesGetRequestBody
	{
		err = json.Unmarshal([]byte(spinRegistryStorageImagesGetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"image_name\": \"Tempore voluptate voluptas.\",\n      \"volume_name\": \"Sed quae ea.\"\n   }'")
		}
	}
	v := &spinregistry.StorageImagesGetPayload{
		VolumeName: body.VolumeName,
		ImageName:  body.ImageName,
	}

	return v, nil
}
