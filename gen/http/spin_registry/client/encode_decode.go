// Code generated by goa v3.2.6, DO NOT EDIT.
//
// spin-registry HTTP client encoders and decoders
//
// Command:
// $ goa gen code.hollensbe.org/erikh/spin/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	spinregistry "code.hollensbe.org/erikh/spin/gen/spin_registry"
	goahttp "goa.design/goa/v3/http"
)

// BuildVMCreateRequest instantiates a HTTP request object with method and path
// set to call the "spin-registry" service "vm/create" endpoint
func (c *Client) BuildVMCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VMCreateSpinRegistryPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-registry", "vm/create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeVMCreateRequest returns an encoder for requests sent to the
// spin-registry vm/create server.
func EncodeVMCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*spinregistry.VM)
		if !ok {
			return goahttp.ErrInvalidType("spin-registry", "vm/create", "*spinregistry.VM", v)
		}
		body := NewVMCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("spin-registry", "vm/create", err)
		}
		return nil
	}
}

// DecodeVMCreateResponse returns a decoder for responses returned by the
// spin-registry vm/create endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeVMCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body uint64
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("spin-registry", "vm/create", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-registry", "vm/create", resp.StatusCode, string(body))
		}
	}
}

// BuildVMUpdateRequest instantiates a HTTP request object with method and path
// set to call the "spin-registry" service "vm/update" endpoint
func (c *Client) BuildVMUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*spinregistry.UpdateVM)
		if !ok {
			return nil, goahttp.ErrInvalidType("spin-registry", "vm/update", "*spinregistry.UpdateVM", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VMUpdateSpinRegistryPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-registry", "vm/update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeVMUpdateRequest returns an encoder for requests sent to the
// spin-registry vm/update server.
func EncodeVMUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*spinregistry.UpdateVM)
		if !ok {
			return goahttp.ErrInvalidType("spin-registry", "vm/update", "*spinregistry.UpdateVM", v)
		}
		body := NewVMUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("spin-registry", "vm/update", err)
		}
		return nil
	}
}

// DecodeVMUpdateResponse returns a decoder for responses returned by the
// spin-registry vm/update endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeVMUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-registry", "vm/update", resp.StatusCode, string(body))
		}
	}
}

// BuildVMDeleteRequest instantiates a HTTP request object with method and path
// set to call the "spin-registry" service "vm/delete" endpoint
func (c *Client) BuildVMDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*spinregistry.VMDeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("spin-registry", "vm/delete", "*spinregistry.VMDeletePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VMDeleteSpinRegistryPath(id)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-registry", "vm/delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeVMDeleteResponse returns a decoder for responses returned by the
// spin-registry vm/delete endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeVMDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-registry", "vm/delete", resp.StatusCode, string(body))
		}
	}
}

// BuildVMGetRequest instantiates a HTTP request object with method and path
// set to call the "spin-registry" service "vm/get" endpoint
func (c *Client) BuildVMGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*spinregistry.VMGetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("spin-registry", "vm/get", "*spinregistry.VMGetPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VMGetSpinRegistryPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-registry", "vm/get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeVMGetResponse returns a decoder for responses returned by the
// spin-registry vm/get endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeVMGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body VMGetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("spin-registry", "vm/get", err)
			}
			err = ValidateVMGetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("spin-registry", "vm/get", err)
			}
			res := NewVMGetVMOK(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-registry", "vm/get", resp.StatusCode, string(body))
		}
	}
}

// BuildVMListRequest instantiates a HTTP request object with method and path
// set to call the "spin-registry" service "vm/list" endpoint
func (c *Client) BuildVMListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VMListSpinRegistryPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-registry", "vm/list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeVMListResponse returns a decoder for responses returned by the
// spin-registry vm/list endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeVMListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []uint64
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("spin-registry", "vm/list", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-registry", "vm/list", resp.StatusCode, string(body))
		}
	}
}

// BuildStorageVolumesListRequest instantiates a HTTP request object with
// method and path set to call the "spin-registry" service
// "storage/volumes/list" endpoint
func (c *Client) BuildStorageVolumesListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StorageVolumesListSpinRegistryPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-registry", "storage/volumes/list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeStorageVolumesListResponse returns a decoder for responses returned by
// the spin-registry storage/volumes/list endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeStorageVolumesListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("spin-registry", "storage/volumes/list", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-registry", "storage/volumes/list", resp.StatusCode, string(body))
		}
	}
}

// BuildStorageVolumesCreateRequest instantiates a HTTP request object with
// method and path set to call the "spin-registry" service
// "storage/volumes/create" endpoint
func (c *Client) BuildStorageVolumesCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StorageVolumesCreateSpinRegistryPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-registry", "storage/volumes/create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStorageVolumesCreateRequest returns an encoder for requests sent to
// the spin-registry storage/volumes/create server.
func EncodeStorageVolumesCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*spinregistry.StorageVolumesCreatePayload)
		if !ok {
			return goahttp.ErrInvalidType("spin-registry", "storage/volumes/create", "*spinregistry.StorageVolumesCreatePayload", v)
		}
		body := NewStorageVolumesCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("spin-registry", "storage/volumes/create", err)
		}
		return nil
	}
}

// DecodeStorageVolumesCreateResponse returns a decoder for responses returned
// by the spin-registry storage/volumes/create endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeStorageVolumesCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-registry", "storage/volumes/create", resp.StatusCode, string(body))
		}
	}
}

// BuildStorageVolumesDeleteRequest instantiates a HTTP request object with
// method and path set to call the "spin-registry" service
// "storage/volumes/delete" endpoint
func (c *Client) BuildStorageVolumesDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StorageVolumesDeleteSpinRegistryPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("spin-registry", "storage/volumes/delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStorageVolumesDeleteRequest returns an encoder for requests sent to
// the spin-registry storage/volumes/delete server.
func EncodeStorageVolumesDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*spinregistry.StorageVolumesDeletePayload)
		if !ok {
			return goahttp.ErrInvalidType("spin-registry", "storage/volumes/delete", "*spinregistry.StorageVolumesDeletePayload", v)
		}
		body := NewStorageVolumesDeleteRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("spin-registry", "storage/volumes/delete", err)
		}
		return nil
	}
}

// DecodeStorageVolumesDeleteResponse returns a decoder for responses returned
// by the spin-registry storage/volumes/delete endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeStorageVolumesDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("spin-registry", "storage/volumes/delete", resp.StatusCode, string(body))
		}
	}
}

// marshalSpinregistryStorageToStorageRequestBody builds a value of type
// *StorageRequestBody from a value of type *spinregistry.Storage.
func marshalSpinregistryStorageToStorageRequestBody(v *spinregistry.Storage) *StorageRequestBody {
	res := &StorageRequestBody{
		Volume:    v.Volume,
		Image:     v.Image,
		ImageSize: v.ImageSize,
		Cdrom:     v.Cdrom,
	}

	return res
}

// marshalStorageRequestBodyToSpinregistryStorage builds a value of type
// *spinregistry.Storage from a value of type *StorageRequestBody.
func marshalStorageRequestBodyToSpinregistryStorage(v *StorageRequestBody) *spinregistry.Storage {
	res := &spinregistry.Storage{
		Volume:    v.Volume,
		Image:     v.Image,
		ImageSize: v.ImageSize,
		Cdrom:     v.Cdrom,
	}

	return res
}

// marshalSpinregistryVMToVMRequestBody builds a value of type *VMRequestBody
// from a value of type *spinregistry.VM.
func marshalSpinregistryVMToVMRequestBody(v *spinregistry.VM) *VMRequestBody {
	res := &VMRequestBody{
		Name:   v.Name,
		Cpus:   v.Cpus,
		Memory: v.Memory,
	}
	if v.Storage != nil {
		res.Storage = make([]*StorageRequestBody, len(v.Storage))
		for i, val := range v.Storage {
			res.Storage[i] = marshalSpinregistryStorageToStorageRequestBody(val)
		}
	}

	return res
}

// marshalVMRequestBodyToSpinregistryVM builds a value of type *spinregistry.VM
// from a value of type *VMRequestBody.
func marshalVMRequestBodyToSpinregistryVM(v *VMRequestBody) *spinregistry.VM {
	res := &spinregistry.VM{
		Name:   v.Name,
		Cpus:   v.Cpus,
		Memory: v.Memory,
	}
	if v.Storage != nil {
		res.Storage = make([]*spinregistry.Storage, len(v.Storage))
		for i, val := range v.Storage {
			res.Storage[i] = marshalStorageRequestBodyToSpinregistryStorage(val)
		}
	}

	return res
}

// unmarshalStorageResponseBodyToSpinregistryStorage builds a value of type
// *spinregistry.Storage from a value of type *StorageResponseBody.
func unmarshalStorageResponseBodyToSpinregistryStorage(v *StorageResponseBody) *spinregistry.Storage {
	res := &spinregistry.Storage{
		Volume:    *v.Volume,
		Image:     *v.Image,
		ImageSize: v.ImageSize,
		Cdrom:     v.Cdrom,
	}

	return res
}
